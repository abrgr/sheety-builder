service cloud.firestore {
  match /databases/{database}/documents {
    match /user-config/{userId=*} {
      allow read, write: if request.auth.uid == userId;
    }
    match /orgs/{orgId=*} {
      allow read: if request.auth.uid == orgId                  // users get their own org
                  || request.auth.uid in resource.data.members  // users can view orgs of which they are a member
                  || request.auth.uid in resource.data.admins;  // users can view orgs of which they are admins
      allow create: if request.auth.uid == orgId                // users can create their own orgs
                  || (
                    orgId.matches('^org:.*$')                   // users can create orgs that have org-namespaced ids.
                    && request.auth.uid in request.resource.data.admins // but they better make themselves admins
                    && request.auth.uid in request.resource.data.members // and members
                  );
      allow update: if request.auth.uid == orgId                // users can update thier own orgs
                  || request.auth.uid in resource.data.admins;  // admins can modify orgs
      // no deletion of orgs

      match /projects/{projectId=*} {
        allow read: if request.auth.uid in resource.data.readers // users can read projects of which they are readers
                  || request.auth.uid in resource.data.writers   // users can read projects of which they are writers
                  || request.auth.uid in resource.data.admins;   // users can read projects of which they are admins
        allow create: if (
                      request.auth.uid == orgId                                         // users can create projects in their org
                      || request.auth.uid in
                        get(/databases/$(database)/documents/orgs/$(orgId)).data.admins // users can create projects in orgs of which they are admins
                      )
                      && request.auth.uid in request.resource.data.admins               // but they must list themselves as an admin
                      && request.auth.uid in request.resource.data.writers              // and a writer
                      && request.auth.uid in request.resource.data.readers;             // and a reader
        allow update: if request.auth.uid in resource.data.admins
                    || (
                      resource.data.admins == request.resource.data.admins              // writers can update projects but cannot change permissions
                      && resource.data.writers == request.resource.data.writers
                      && resource.data.readers == request.resource.data.readers
                      && request.auth.uid in resource.data.writers
                    );
        // no deletion of projects

        match /publishedVersions/{appId=*}/versions/{version=*} {
          allow read: if request.auth.uid in get(/databases/$(database)/documents/orgs/$(orgId)/projects/$(projectId)).data.readers; // project reader
          allow create: if request.auth.uid in get(/databases/$(database)/documents/orgs/$(orgId)/projects/$(projectId)).data.writers; // project writer

          // no deletion of versions
          // no updates of versions
        }
      }
    }
    match /projectInvites/{email=*}/projects/{projectId=*} {
      allow read, delete: if request.auth.token.email_verified
                        && request.auth.token.email == email;                            // users can read and delete their own invitations
      allow create, delete: if request.auth.uid == request.resource.data.invitedBy.uid;  // any user can send an invite if they own up to it or revoke their own invite

      // no updates of invites
    }
  }
}
